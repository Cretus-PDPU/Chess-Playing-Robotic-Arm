import cv2
import numpy as np  

img = cv2.imread("Python_Chess/Images/1.jpg")
img = cv2.resize(img,(800,800))
# points = np.zeros((9,9,2))


# ix,iy = -1,-1

# def draw_circle(event,x,y,flags,param):
#     global ix,iy
#     if event == cv2.EVENT_LBUTTONDBLCLK:
#         cv2.circle(img,(x,y),2,(255,0,0),-1)
#         ix,iy = x,y

# cv2.namedWindow('image')
# cv2.setMouseCallback('image',draw_circle)

# img = cv2.GaussianBlur(img,(5,5),0)
# gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
# gray = np.float32(gray)
# dst = cv2.cornerHarris(gray,2,3,0.04)
# dst = cv2.dilate(dst,None)
# img[dst>0.01*dst.max()]=[0,0,255]
# cv2.imshow("img",img)
# cv2.waitKey(0)

# i=0
# j=0

# while(True):
#     cv2.imshow("image",img)
#     k = cv2.waitKey(1)
#     if(k == ord('a')):
#         print(i,j)
#         if(i == 9):
#             break
#         points[i][j][0]=ix
#         points[i][j][1]=iy
#         if(j == 8):
#             i = (i+1)
#         j = (j+1)%9
        
# print(points)

points = [[[ 40.,35.],[132.,34.],[223.,32.],[314., 33.],[405. , 30.],[500. , 29.],[589. , 26.],[683. , 26.] ,[777. , 25.]],
          [[ 38., 127.],[129., 126.],[221., 124.],[313., 123.],[405., 123.], [496., 121.],[589., 119.],[680., 118.],[774., 118.]],
          [[36., 218.],[128., 217.],[220., 216.],[312., 215.],[403., 214.],[495., 212.],[588., 210.],[680., 210.],[773., 209.]],
          [[33., 310.],[124., 309.],[219., 308.],[310., 307.],[400., 305.],[492., 302.],[584., 302.],[677., 301.],[772., 300.]],
          [[ 32., 399.],[124., 398.],[216., 398.],[309., 395.],[400., 394.],[491., 394.],[583., 394.],[679., 393.],[771., 393.]],
          [[ 28., 493.],[120., 489.],[214., 488.],[306., 486.],[399., 485.],[491., 483.],[584., 484.],[676., 483.],[769., 483.]],
          [[ 27., 583.],[120., 582.],[212., 580.],[304., 579.],[396., 579.],[490., 576.],[583., 577.],[677., 576.],[772., 576.]],
          [[ 24., 677.],[118., 675.],[210., 674.],[304., 672.],[396., 672.],[488., 670.],[583., 670.],[676., 670.],[768., 670.]],
          [[ 24., 770.],[116., 770.],[209., 770.],[301., 767.],[395., 766.],[488., 766.],[582., 767.],[675., 765.],[769., 766.]]]

boxes = np.zeros((8,8,4))

for i in range(8):
    for j in range(8):
        print(i,j)
        boxes[i][j][0] = points[i][j][0]
        boxes[i][j][1] = points[i][j][1]
        boxes[i][j][2] = points[i+1][j+1][0]
        boxes[i][j][3] = points[i+1][j+1][1]

print(boxes)


for i in range(8):
    for j in range(8):
        box1 = boxes[i,j]
        cv2.rectangle(img, (int(box1[0]), int(box1[1])), (int(box1[2]), int(box1[3])), (255,0,0), 2)
        cv2.putText(img,"({},{})".format(i,j),(int(box1[2])-70, int(box1[3])-50),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,0,255),2)
        cv2.imshow("img",img)
        # cv2.waitKey(0)

cv2.waitKey(0)
cv2.destroyAllWindows()
        
# for Image Python_Chess/Images/1.jpg
# [[[ 40.  35.]
#   [132.  34.]
#   [223.  32.]
#   [314.  33.]
#   [405.  30.]
#   [500.  29.]
#   [589.  26.]
#   [683.  26.]
#   [777.  25.]]

#  [[ 38. 127.]
#   [129. 126.]
#   [221. 124.]
#   [313. 123.]
#   [405. 123.]
#   [496. 121.]
#   [589. 119.]
#   [680. 118.]
#   [774. 118.]]

#  [[ 36. 218.]
#   [128. 217.]
#   [220. 216.]
#   [312. 215.]
#   [403. 214.]
#   [495. 212.]
#   [588. 210.]
#   [680. 210.]
#   [773. 209.]]

#  [[ 33. 310.]
#   [124. 309.]
#   [219. 308.]
#   [310. 307.]
#   [400. 305.]
#   [492. 302.]
#   [584. 302.]
#   [677. 301.]
#   [772. 300.]]

#  [[ 32. 399.]
#   [124. 398.]
#   [216. 398.]
#   [309. 395.]
#   [400. 394.]
#   [491. 394.]
#   [583. 394.]
#   [679. 393.]
#   [771. 393.]]

#  [[ 28. 493.]
#   [120. 489.]
#   [214. 488.]
#   [306. 486.]
#   [399. 485.]
#   [491. 483.]
#   [584. 484.]
#   [676. 483.]
#   [769. 483.]]

#  [[ 27. 583.]
#   [120. 582.]
#   [212. 580.]
#   [304. 579.]
#   [396. 579.]
#   [490. 576.]
#   [583. 577.]
#   [677. 576.]
#   [772. 576.]]

#  [[ 24. 677.]
#   [118. 675.]
#   [210. 674.]
#   [304. 672.]
#   [396. 672.]
#   [488. 670.]
#   [583. 670.]
#   [676. 670.]
#   [768. 670.]]

#  [[ 24. 770.]
#   [116. 770.]
#   [209. 770.]
#   [301. 767.]
#   [395. 766.]
#   [488. 766.]
#   [582. 767.]
#   [675. 765.]
#   [769. 766.]]]